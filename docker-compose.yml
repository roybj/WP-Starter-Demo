services:
  # Nginx Web Server (Dynamic naming and ports)
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-8080}:80"
    volumes:
      - .:/var/www/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/wordpress.conf:/etc/nginx/conf.d/default.conf:ro
      - wp_uploads:/var/www/html/web/app/uploads
    depends_on:
      - wordpress
    networks:
      - wp-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=nginx"

  # WordPress/PHP-FPM Service
  wordpress:
    build:
      context: .
      dockerfile: docker/Dockerfile.wordpress
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-dev
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    volumes:
      # Project files (bind mount for live editing)
      - .:/var/www/html
      # Persistent uploads
      - wp_uploads:/var/www/html/web/app/uploads
      # Composer cache
      - composer_cache:/root/.composer
      # Node modules cache (if using Node.js)
      - node_modules:/var/www/html/node_modules
    environment:
      # WordPress Environment
      WP_ENV: ${WP_ENV:-development}
      # Database
      DB_NAME: ${DB_NAME:-wordpress_dev}
      DB_USER: ${DB_USER:-wp_user}
      DB_PASSWORD: ${DB_PASSWORD:-wp_secure_password}
      DB_HOST: mysql
      TABLE_PREFIX: ${TABLE_PREFIX:-wp_}
      
      # URLs (dynamic port support)
      WP_HOME: ${WP_HOME:-http://localhost:8080}
      WP_SITEURL: ${WP_SITEURL:-http://localhost:8080/wp}
      
      # Security Keys
      AUTH_KEY: ${AUTH_KEY:-'your-unique-auth-key-here'}
      SECURE_AUTH_KEY: ${SECURE_AUTH_KEY:-'your-unique-secure-auth-key-here'}
      LOGGED_IN_KEY: ${LOGGED_IN_KEY:-'your-unique-logged-in-key-here'}
      NONCE_KEY: ${NONCE_KEY:-'your-unique-nonce-key-here'}
      AUTH_SALT: ${AUTH_SALT:-'your-unique-auth-salt-here'}
      SECURE_AUTH_SALT: ${SECURE_AUTH_SALT:-'your-unique-secure-auth-salt-here'}
      LOGGED_IN_SALT: ${LOGGED_IN_SALT:-'your-unique-logged-in-salt-here'}
      NONCE_SALT: ${NONCE_SALT:-'your-unique-nonce-salt-here'}
      
      # Development Settings
      DISALLOW_FILE_MODS: ${DISALLOW_FILE_MODS:-false}
      WP_DEBUG: ${WP_DEBUG:-true}
      WP_DEBUG_LOG: ${WP_DEBUG_LOG:-true}
      WP_DEBUG_DISPLAY: ${WP_DEBUG_DISPLAY:-false}
      
      # Mail Configuration (Shared MailHog - optional)
      MAIL_HOST: shared-mailhog
      MAIL_PORT: 1025
      MAIL_USERNAME: null
      MAIL_PASSWORD: null
      MAIL_ENCRYPTION: null
    networks:
      - wp-network
      - wordpress-shared
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=wordpress"

  # MariaDB Database (Dynamic naming and ports)
  mysql:
    image: mariadb:10.11
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_secure_password}
      MYSQL_DATABASE: ${DB_NAME:-wordpress_dev}
      MYSQL_USER: ${DB_USER:-wp_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-wp_secure_password}
      # MariaDB specific settings
      MARIADB_AUTO_UPGRADE: 1
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
      - ./docker/mysql/init:/docker-entrypoint-initdb.d:ro
    command:
      - --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      - --innodb_use_native_aio=0
    networks:
      - wp-network
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=mysql"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - wp-network
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=redis"

  # phpMyAdmin (Dynamic naming and ports)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-phpmyadmin
    restart: unless-stopped
    ports:
      - "${PHPMYADMIN_PORT:-8081}:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${DB_USER:-wp_user}
      PMA_PASSWORD: ${DB_PASSWORD:-wp_secure_password}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_secure_password}
      PMA_THEME: pmahomme
    depends_on:
      - mysql
    networks:
      - wp-network
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=phpmyadmin"

# MailHog is now optional - use docker-compose.mailhog.yml for shared email testing
# Run: docker-compose -f docker-compose.mailhog.yml up -d

  # WP-CLI (Dynamic naming)
  wp-cli:
    image: wordpress:cli-php8.2
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-cli
    restart: "no"
    volumes:
      - .:/var/www/html
      - wp_uploads:/var/www/html/web/app/uploads
    environment:
      WP_CLI_CACHE_DIR: /var/www/html/.wp-cli/cache
    depends_on:
      - mysql
      - wordpress
    networks:
      - wp-network
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=wp-cli"
    working_dir: /var/www/html

  # Node.js Development (Optional - Dynamic naming)
  nodejs:
    image: node:18-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-wp}-nodejs
    restart: "no"
    volumes:
      - .:/var/www/html
      - node_modules:/var/www/html/node_modules
    working_dir: /var/www/html
    networks:
      - wp-network
    labels:
      - "project=${COMPOSE_PROJECT_NAME:-wp}"
      - "service=nodejs"
    profiles:
      - nodejs

# Persistent Data Volumes (Project-isolated)
volumes:
  mysql_data:
    name: ${COMPOSE_PROJECT_NAME:-wp}_mysql_data
  redis_data:
    name: ${COMPOSE_PROJECT_NAME:-wp}_redis_data
  wp_uploads:
    name: ${COMPOSE_PROJECT_NAME:-wp}_wp_uploads
  composer_cache:
    name: ${COMPOSE_PROJECT_NAME:-wp}_composer_cache
  node_modules:
    name: ${COMPOSE_PROJECT_NAME:-wp}_node_modules

# Networks: Isolated per project + shared for MailHog
networks:
  wp-network:
    name: ${COMPOSE_PROJECT_NAME:-wp}_network
    driver: bridge
  wordpress-shared:
    external: true
    name: wordpress-shared