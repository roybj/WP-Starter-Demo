version: '3.8'

services:
  # Nginx Web Server (matches CloudPanel architecture)
  nginx:
    image: nginx:alpine
    container_name: wp-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/wordpress.conf:/etc/nginx/conf.d/default.conf:ro
      - wp_uploads:/var/www/html/web/app/uploads
    depends_on:
      - wordpress
    networks:
      - wp-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # WordPress/PHP-FPM Service
  wordpress:
    build:
      context: .
      dockerfile: docker/Dockerfile.wordpress
    container_name: wp-dev
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    volumes:
      # Project files (bind mount for live editing)
      - .:/var/www/html
      # Persistent uploads
      - wp_uploads:/var/www/html/web/app/uploads
      # Composer cache
      - composer_cache:/root/.composer
      # Node modules cache (if using Node.js)
      - node_modules:/var/www/html/node_modules
    environment:
      # WordPress Environment
      WP_ENV: development
      # Database
      DB_NAME: wordpress_dev
      DB_USER: wp_user
      DB_PASSWORD: wp_secure_password
      DB_HOST: mysql
      TABLE_PREFIX: wp_
      # URLs (will be overridden by .env.local if present)
      WP_HOME: http://localhost:8080
      WP_SITEURL: http://localhost:8080/wp
      # Debug settings
      WP_DEBUG: "true"
      WP_DEBUG_LOG: "true"
      WP_DEBUG_DISPLAY: "true"
      SCRIPT_DEBUG: "true"
      # Security
      DISALLOW_FILE_EDIT: "true"
      DISALLOW_FILE_MODS: "false"  # Allow in development
      # Performance
      WP_MEMORY_LIMIT: 512M
      WP_POST_REVISIONS: 5
      # Redis Cache
      WP_REDIS_HOST: redis
      WP_REDIS_PORT: 6379
      WP_REDIS_DATABASE: 0
      # WordPress Salts (generated automatically)
      AUTH_KEY: "dev-auth-key-change-in-production"
      SECURE_AUTH_KEY: "dev-secure-auth-key-change-in-production"
      LOGGED_IN_KEY: "dev-logged-in-key-change-in-production"
      NONCE_KEY: "dev-nonce-key-change-in-production"
      AUTH_SALT: "dev-auth-salt-change-in-production"
      SECURE_AUTH_SALT: "dev-secure-auth-salt-change-in-production"
      LOGGED_IN_SALT: "dev-logged-in-salt-change-in-production"
      NONCE_SALT: "dev-nonce-salt-change-in-production"
    networks:
      - wp-network
    expose:
      - "9000"  # PHP-FPM port for Nginx communication

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: wp-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: wordpress_dev
      MYSQL_USER: wp_user
      MYSQL_PASSWORD: wp_secure_password
      MYSQL_ROOT_PASSWORD: root_secure_password
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - wp-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wp-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - wp-network
    command: redis-server /etc/redis/redis.conf

  # phpMyAdmin (Database Management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: wp-phpmyadmin
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_USER: wp_user
      PMA_PASSWORD: wp_secure_password
      MYSQL_ROOT_PASSWORD: root_secure_password
    ports:
      - "8081:80"
    networks:
      - wp-network

  # MailHog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: wp-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - wp-network

  # WP-CLI Service (for running WordPress commands)
  wpcli:
    build:
      context: .
      dockerfile: docker/Dockerfile.wpcli
    container_name: wp-cli
    restart: "no"
    depends_on:
      - wordpress
      - mysql
    volumes:
      - .:/var/www/html
      - wp_uploads:/var/www/html/wp-content/uploads
    environment:
      # Same environment as WordPress
      WP_ENV: development
      DB_NAME: wordpress_dev
      DB_USER: wp_user
      DB_PASSWORD: wp_secure_password
      DB_HOST: mysql
      TABLE_PREFIX: wp_
      WP_HOME: http://localhost:8080
      WP_SITEURL: http://localhost:8080/wp
    networks:
      - wp-network
    working_dir: /var/www/html
    entrypoint: wp
    command: --info

  # Node.js Service (for theme/asset building)
  nodejs:
    image: node:18-alpine
    container_name: wp-nodejs
    restart: "no"
    volumes:
      - .:/var/www/html
      - node_modules:/var/www/html/node_modules
    working_dir: /var/www/html
    networks:
      - wp-network
    command: tail -f /dev/null  # Keep container running

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  wp_uploads:
    driver: local
  composer_cache:
    driver: local
  node_modules:
    driver: local

networks:
  wp-network:
    driver: bridge